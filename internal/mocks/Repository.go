// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "github.com/iyiola-dev/numeris/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateActivityLog provides a mock function with given fields: log
func (_m *Repository) CreateActivityLog(log *models.ActivityLog) error {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for CreateActivityLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ActivityLog) error); ok {
		r0 = rf(log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCustomer provides a mock function with given fields: customer
func (_m *Repository) CreateCustomer(customer *models.Customer) error {
	ret := _m.Called(customer)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInvoice provides a mock function with given fields: invoice
func (_m *Repository) CreateInvoice(invoice *models.Invoice) error {
	ret := _m.Called(invoice)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Invoice) error); ok {
		r0 = rf(invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInvoiceItem provides a mock function with given fields: item
func (_m *Repository) CreateInvoiceItem(item *models.InvoiceItem) error {
	ret := _m.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvoiceItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.InvoiceItem) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePaymentDetails provides a mock function with given fields: details
func (_m *Repository) CreatePaymentDetails(details *models.PaymentDetails) error {
	ret := _m.Called(details)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.PaymentDetails) error); ok {
		r0 = rf(details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: user
func (_m *Repository) CreateUser(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCustomer provides a mock function with given fields: id
func (_m *Repository) DeleteCustomer(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInvoice provides a mock function with given fields: id
func (_m *Repository) DeleteInvoice(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInvoiceItem provides a mock function with given fields: id
func (_m *Repository) DeleteInvoiceItem(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvoiceItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePaymentDetails provides a mock function with given fields: id
func (_m *Repository) DeletePaymentDetails(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePaymentDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id
func (_m *Repository) DeleteUser(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActivityLogs provides a mock function with given fields: filters
func (_m *Repository) GetActivityLogs(filters map[string]interface{}) ([]models.ActivityLog, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for GetActivityLogs")
	}

	var r0 []models.ActivityLog
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) ([]models.ActivityLog, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []models.ActivityLog); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ActivityLog)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerByID provides a mock function with given fields: id
func (_m *Repository) GetCustomerByID(id uuid.UUID) (*models.Customer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerByID")
	}

	var r0 *models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.Customer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Customer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomers provides a mock function with given fields: filters
func (_m *Repository) GetCustomers(filters map[string]interface{}) ([]models.Customer, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomers")
	}

	var r0 []models.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) ([]models.Customer, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []models.Customer); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceByID provides a mock function with given fields: id
func (_m *Repository) GetInvoiceByID(id uuid.UUID) (*models.Invoice, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceByID")
	}

	var r0 *models.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.Invoice, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Invoice); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceItems provides a mock function with given fields: invoiceID
func (_m *Repository) GetInvoiceItems(invoiceID uuid.UUID) ([]models.InvoiceItem, error) {
	ret := _m.Called(invoiceID)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceItems")
	}

	var r0 []models.InvoiceItem
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.InvoiceItem, error)); ok {
		return rf(invoiceID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.InvoiceItem); ok {
		r0 = rf(invoiceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.InvoiceItem)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(invoiceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoices provides a mock function with given fields: filters
func (_m *Repository) GetInvoices(filters map[string]interface{}) ([]models.Invoice, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoices")
	}

	var r0 []models.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) ([]models.Invoice, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []models.Invoice); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentDetailsByInvoiceID provides a mock function with given fields: invoiceID
func (_m *Repository) GetPaymentDetailsByInvoiceID(invoiceID uuid.UUID) (*models.PaymentDetails, error) {
	ret := _m.Called(invoiceID)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentDetailsByInvoiceID")
	}

	var r0 *models.PaymentDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.PaymentDetails, error)); ok {
		return rf(invoiceID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.PaymentDetails); ok {
		r0 = rf(invoiceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PaymentDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(invoiceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *Repository) GetUserByID(id uuid.UUID) (*models.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: filters
func (_m *Repository) GetUsers(filters map[string]interface{}) ([]models.User, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) ([]models.User, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []models.User); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomer provides a mock function with given fields: id, customer
func (_m *Repository) UpdateCustomer(id uuid.UUID, customer *models.Customer) error {
	ret := _m.Called(id, customer)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *models.Customer) error); ok {
		r0 = rf(id, customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInvoice provides a mock function with given fields: id, invoice
func (_m *Repository) UpdateInvoice(id uuid.UUID, invoice *models.Invoice) error {
	ret := _m.Called(id, invoice)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *models.Invoice) error); ok {
		r0 = rf(id, invoice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInvoiceItem provides a mock function with given fields: id, item
func (_m *Repository) UpdateInvoiceItem(id uuid.UUID, item *models.InvoiceItem) error {
	ret := _m.Called(id, item)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvoiceItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *models.InvoiceItem) error); ok {
		r0 = rf(id, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePaymentDetails provides a mock function with given fields: id, details
func (_m *Repository) UpdatePaymentDetails(id uuid.UUID, details *models.PaymentDetails) error {
	ret := _m.Called(id, details)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *models.PaymentDetails) error); ok {
		r0 = rf(id, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: id, user
func (_m *Repository) UpdateUser(id uuid.UUID, user *models.User) error {
	ret := _m.Called(id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *models.User) error); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
